
# Git

- .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
- .git 폴더를 추가해 관리를 시작한 곳을 레포지토리(Repository)라고 부른다.
- .git 폴더 내부에는 해당 레포지토리의 모든 정보가 기록되어 있다. (변경 이력, 복원지점 등)
- .git 내부의 정보를 이용해 해당 레포지토리를 예전 모습으로 되돌릴 수 있다.
- Git는 레포지토리 내부의 아주 미세한 변화도 알아채고 관리해준다.
- Eclipse에 내장된 Git를 사용할 수 도 있다.

# 새 프로젝트 레포지토리로 만들기

- Window -> Show View -> Other... -> Git -> Git Repositories
- 새 프로젝트 생성 -> 새 프로젝트 우클릭 -> Team -> Share Project
	-> 새 레포지토리 생성 또는 존재하는 레포지토리 선택
		(ex: C:\JavaFullStack\repos\Gitstudy)
- 원래 java-workspace에 있던 프로젝트가 자동으로 레포지토리로 옮겨가게 된다.
- 프로젝트가 Git의 관리를 받기 시작하게 된다.


# Commit

- 레포지토리의 현재 상태를 확정짓는 명령어
- 언제든지 커밋한 시점으로 돌아갈 수 있다(체크아웃)
- history 에서 여태까지의 커밋 이력을 볼 수 있다.
  (레포지토리 우클릭 -> Show in -> History)
  
# staged 와 unstaged 상태
  	
- 가장 최근 커밋 이후로 변경사항이 있는 레포지토리 내부의 파일들은
  모두 unstaged 상태가 된다.
- unstaged 파일들 중 이번 커밋에 확정짓고 싶은 파일들만 선택하여
  staged 상태로 변경 후 커밋을 진행 할 수 있다.
- 미완성 파일들은 unstaged 상테로 두는 것이 좋다.
- 커밋은 저장처럼 자주 하는것이 아니라 프로젝트의 기능에 확실한 변경점이
  있을때 한번씩 하는 것이 아니다. 
  
  # History
  
- 레포지토리의 변경 이력을 한눈에 볼 수 있는 명령어
- 파일을 클릭하면 해당 파일만의 History 를 볼수 있다.
- History 를 보고 원하는 시점의 커밋으로 언제든 체크아웃 할 수 있다.
  (체크아웃 진행 시 커밋되지 않은 모든 사항은 사라지므로 주의)
- 과거 시점의 커밋으로 돌아갔을 때 코드를 수정한 후 커밋하면 
  다시 원래의 미래로 돌아 갈 수 없다.
- HEAD : 내가 현재 보고 있는 커밋
       	
		